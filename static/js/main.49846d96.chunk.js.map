{"version":3,"sources":["panels/Persik.js","panels/Settings.js","panels/Home.js","App.js","index.js","img/persik.png"],"names":["osName","platform","Persik","props","id","left","onClick","go","data-to","IOS","className","src","persik","alt","Settings","City","fetchedUser","town","city","title","connect","subscribe","event","detail","type","data","available","adress","long","lat","x","XMLHttpRequest","open","onload","status","string","JSON","parse","responseText","response","GeoObjectCollection","featureMember","GeoObject","name","send","stringify","Home","before","photo_200","description","first_name","last_name","size","level","App","useState","activePanel","setActivePanel","setUser","popout","setPopout","useEffect","a","user","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","VKConnect","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.49846d96.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst osName = platform();\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</HeaderButton>}\n\t\t>\n\t\t\tPersik\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\"/>\n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst osName = platform();\n\nconst Settings = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</HeaderButton>}\n\t\t>\n\t\t\tPersik\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\"/>\n\t</Panel>\n);\n\nSettings.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport connect from '@vkontakte/vk-connect';\nimport VKConnect from '@vkontakte/vkui-connect-mock';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28Settings from '@vkontakte/icons/dist/28/settings';\nimport Icon24Settings from '@vkontakte/icons/dist/24/settings';\n\n\nconst osName = platform();\n\nconst Home = ({ id, go, fetchedUser}) => (\n\t<Panel id={id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={go} data-to=\"settings\">\n\t\t\t\t{osName === IOS ? <Icon28Settings/> : <Icon24Settings/>}\n\t\t\t</HeaderButton>}\n\t\t>Newsify</PanelHeader>\n\t\t{fetchedUser &&\n\t\t<Group title=\"Профиль\">\n\t\t\t<Cell\n\t\t\t\tbefore={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n\t\t\t\tdescription={City(fetchedUser)}>\n\t\t\t\t{`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n\t\t\t</Cell>\n\t\t</Group>}\n\n\t\t<Group title=\"Navigation Example\">\n\t\t\t<Div>\n\t\t\t\t<Button size=\"xl\" level=\"2\" onClick={go} data-to=\"persik\">\n\t\t\t\t\tShow me the Persik, please\n\t\t\t\t</Button>\n\t\t\t</Div>\n\t\t</Group>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nfunction City(fetchedUser){\n    var town=fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '';\n//    var town=\"dfghg\";\n    connect.subscribe(event => {\n//        if (!event.detail) {\n//            return;\n//        }\n\n        const { type, data } = event.detail;\n\n        if (type === 'VKWebAppGeodataResult') {\n            if( data.available===true){\n                var adress='https://geocode-maps.yandex.ru/1.x/?format=json&apikey=aaa60bd2-f573-4cf9-873e-589107560bc0&sco=longlat&kind=locality&geocode='+data.long+','+data.lat;\n                var x=new XMLHttpRequest();\n                x.open('GET', adress,true);\n                x.onload = function() {\n                    if (x.status === 200) {\n                        var string = JSON.parse(x.responseText);\n                        town = string.response.GeoObjectCollection.featureMember[0].GeoObject.name;\n                    }\n                }\n                x.send();\n             }\n            else{\n               town=JSON.stringify(data);\n            }\n        }\n        else {town = type;}\n    });\n    connect.send(\"VKWebAppGetGeodata\", {});\n//    town=JSON.stringify(connect.send(\"VKWebAppGetGeodata\", {}));\n    return town;\n}\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\n//import VKConnect from '@vkontakte/vkui-connect-mock';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport Persik from './panels/Persik';\nimport Settings from './panels/Settings';\n//import { platform, IOS } from '@vkontakte/vkui';\n//import Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\n//import PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\n//import Button from '@vkontakte/vkui/dist/components/Button/Button';\n//import Group from '@vkontakte/vkui/dist/components/Group/Group';\n//import Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\n//import Div from '@vkontakte/vkui/dist/components/Div/Div';\n//import Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\n//import HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\n//import Icon28Settings from '@vkontakte/icons/dist/28/settings';\n//import Icon24Settings from '@vkontakte/icons/dist/24/settings';\n\n\nimport Home from './panels/Home';\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n//\tconst [fetchedGeo, setGeo] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n            <Settings id='settings' go={go} />\n\t\t\t<Persik id='persik' go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport VKConnect from '@vkontakte/vkui-connect-mock';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\nVKConnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";"],"sourceRoot":""}