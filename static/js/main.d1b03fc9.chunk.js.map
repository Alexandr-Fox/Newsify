{"version":3,"sources":["panels/Settings.js","panels/Home.js","App.js","index.js","img/persik.png"],"names":["email","osName","platform","onChange","e","currentTarget","name","value","console","log","Settings","id","go","fetchedUser","left","onClick","data-to","IOS","separator","header","mode","size","before","photo_200","src","description","city","title","first_name","last_name","top","type","placeholder","disabled","Home","authToken","subtitle","slideWidth","style","height","width","align","bullets","persik","alt","background","fill","App","props","setState","activePanel","dataset","to","state","items","connect","subscribe","detail","data","access_token","send","this","React","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d1b03fc9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS, Panel, Button, PanelHeaderButton, FormLayoutGroup, FormLayout, Input, CardGrid, Card, Header, Avatar, Cell, PanelHeader, Group, Div } from '@vkontakte/vkui';\n//import connect from '@vkontakte/vk-connect';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport Icon28Instagram from '@vkontakte/icons/dist/28/logo_instagram';\n\n//import persik from '../img/persik.png';\n//import './Persik.css';\n\nconst osName = platform();\n\n//var count = 0;\n//const popout=<ScreenSpinner size='large' />\nvar email;\nconst onChange = (e) => {\n    const { name, value } = e.currentTarget;\n    console.log(name,  email);\n    email= value;\n}\nconst Settings = ({ id, go, fetchedUser}) => (\n\t<Panel id={id}>\n\t\t<PanelHeader\n\t\t\tleft={<PanelHeaderButton onClick={go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</PanelHeaderButton>}\n//\t\t\tpopout={popout}\n\t\t>\n\t\t\tНастройки\n\t\t</PanelHeader>\n\t\t{fetchedUser &&\n        <Group separator=\"hide\" header={<Header mode=\"secondary\">Профиль</Header>}>\n            <CardGrid>\n                <Card size=\"l\" mode=\"shadow\">\n                    <Cell\n                        before={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n                        description={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}>\n                        {`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n                    </Cell>\n                </Card>\n            </CardGrid>\n        </Group>}\n        <Div>\n            <Group separator=\"hide\" header={<Header mode=\"secondary\">Instagram</Header>}>\n                <CardGrid>\n                    <Card size=\"l\" mode=\"shadow\">\n                        <Cell\n                            before={<Icon28Instagram/>}\n                            description={\"Временно не работает!\"}>\n                            Вход в Instagram\n                        </Cell>\n                        <FormLayout>\n                            <FormLayoutGroup >\n                                <Input top=\"Логин\" name=\"email\" type=\"email\" placeholder=\"Введите логин\" value={email} onChange={onChange}/>\n                                <Input top=\"Пароль\" type=\"password\"  placeholder=\"Введите пароль\" />\n                                <Button size=\"xl\" mode=\"secondary\" onClick={go} data-to='home' disabled>Войти</Button>\n                            </FormLayoutGroup>\n                        </FormLayout>\n                    </Card>\n                </CardGrid>\n            </Group>\n        </Div>\n\n\t</Panel>\n);\n\nSettings.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n////           CardGrid\n////                Card size=\"l\" mode=\"shadow\"\n////                /Card\n////            /CardGrid\n\n//function statTown(fetchedUser){\n//    return fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '';\n//}\n//\n//function City(fetchedUser){\n//    console.log(\"start\");\n//    const [fetchedGeo, setGeo] = useState(null);\n//    var town=fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '';\n//    //if (count%100 != 0) return town;\n////    var town = \"False\";\n//    useEffect(() => {\n//        connect.subscribe(({ detail: { type, data }}) => {\n//            if (type === 'VKWebAppUpdateConfig') {\n//                const schemeAttribute = document.createAttribute('scheme');\n//                schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n//                document.body.attributes.setNamedItem(schemeAttribute);\n//            }\n//            if (type === 'VKWebAppGeodataFailed') {\n//                console.log(data);\n//            }\n//        });\n//        async function fetchData() {\n//            const geo = await connect.send('VKWebAppGetGeodata');\n//            setGeo(geo);\n//        }\n//        fetchData();\n//    }, []);\n//    console.log(fetchedGeo);\n//    town=GeoCod(fetchedGeo,fetchedUser);\n//    return town;\n//}\n//function GeoCod(fetchedGeo,fetchedUser){\n//    const [fetchedCity, setCity] = useState(null);\n////    const [test,setDat] = useState(null);\n//    var x=new XMLHttpRequest();\n//    console.log(\"helo\");\n//    var adress='https://geocode-maps.yandex.ru/1.x/?format=json&apikey=aaa60bd2-f573-4cf9-873e-589107560bc0&sco=longlat&kind=locality&geocode=';\n//    if (fetchedGeo !== null){\n//        if( fetchedGeo.available === true){\n//            adress=adress+fetchedGeo.long+','+fetchedGeo.lat;\n//            x.open('GET', adress,false);\n//            x.onload = function() {\n//                if (x.status === 200 ) {\n//                    var string = JSON.parse(x.responseText);\n//                    setCity(string.response.GeoObjectCollection.featureMember[0].GeoObject.name);\n//                    console.log(fetchedGeo);\n//                }\n//            }\n//            x.send();\n//        }\n//        else{\n//           setCity(fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '');\n//        };\n//    }\n//    else{\n//       console.log(fetchedGeo);\n//       setCity(fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '');\n//    };\n//    count=count+1;\n//    if (fetchedCity!==null){\n//        console.log(\"db run\")\n//        let db = new sqlite3.Database('./db/Newsify.db', (err) => {\n//            if (err) {\n//                console.error(err.message);\n//            }\n//            else{\n//                console.log('Connected to the chinook database.');\n//                selectData();}\n//        });\n//        const selectData = () =>{\n//            console.log(\"Select data\")\n//            db.all('SELECT * FROM Newsify WHERE ID = ?', [fetchedUser.id], (err, rows) => {\n//                if (err) {\n//                    throw err;\n//                }\n//                console.log(rows);\n//                if (rows.length>0){\n//                    updateData();\n//                }\n//                else {\n//                    insertData();\n//                };\n//            });\n//        }\n//        const updateData = () =>{\n//            console.log(\"Update data\")\n//            db.run(\"UPDATE FROM Newsify SET CITY='?' WHERE ID=?\", [fetchedCity,fetchedUser.id]);\n//        }\n//        const insertData = () =>{\n//            console.log(\"Insert data\")\n//            db.run('INSERT INTO Newsify (ID,CITY,LANGUAGE) VALUES (?,?,?)', [fetchedUser.id,fetchedCity,\"RU\"]);\n//        }\n//        db.close((err) => {\n//            if (err) {\n//                return console.error(err.message);\n//            }\n//            console.log('Close the database connection.');\n//        });\n//    }\n//    return fetchedCity;\n//}\n\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//import connect from '@vkontakte/vk-connect';\n//import VKConnect from '@vkontakte/vkui-connect-mock';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton';\nimport Icon28Settings from '@vkontakte/icons/dist/28/settings';\nimport Icon16Like from '@vkontakte/icons/dist/16/like';\nimport Icon16Repost from '@vkontakte/icons/dist/16/repost';\nimport Icon16Comment from '@vkontakte/icons/dist/16/comment';\nimport Icon24Settings from '@vkontakte/icons/dist/24/settings';\n//import Icon28VK from '@vkontakte/icons/dist/28/logo_vk';\nimport Icon28Instagram from '@vkontakte/icons/dist/28/logo_instagram';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport CardGrid from '@vkontakte/vkui/dist/components/CardGrid/CardGrid';\nimport Card from '@vkontakte/vkui/dist/components/Card/Card';\nimport Gallery from '@vkontakte/vkui/dist/components/Gallery/Gallery';\nimport Header from '@vkontakte/vkui/dist/components/Header/Header';\nimport FormLayout from '@vkontakte/vkui/dist/components/FormLayout/FormLayout';\nimport FormLayoutGroup from '@vkontakte/vkui/dist/components/FormLayoutGroup/FormLayoutGroup';\nimport persik from '../img/persik.png';\nconst osName = platform();\n//const Array = [{text:'xxxxxxx',title_group:'dsfth'},{text:'xxxxxxx',title_group:'dsfth'}]\nconst Home = ({ id, go, authToken, fetchedUser}) => (\n\t<Panel id={id}>\n\t\t<PanelHeader\n\t\t\tleft={<PanelHeaderButton onClick={go} data-to=\"settings\">\n\t\t\t\t{osName === IOS ? <Icon28Settings/> : <Icon24Settings/>}\n\t\t\t</PanelHeaderButton>}\n\t\t>Новости</PanelHeader>\n\t\t{fetchedUser &&\n\t\t<Div>\n            <Group separator=\"hide\" header={<Header subtitle=\"Instagram\"><Icon28Instagram/></Header>}>\n                <CardGrid>\n                    <Card size=\"l\" mode=\"shadow\">\n                        <Cell\n                            before={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n                            description={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}>\n                            {`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n                        </Cell>\n                        <FormLayout>\n                            <FormLayoutGroup >\n                                <Gallery\n                                    slideWidth=\"90%\"\n                                    style={{ height: \"10%\" ,width: \"99%\"}}\n                                    align=\"centred\"\n                                    bullets=\"dark\"\n                                >\n                                    <img src={persik} alt=\"example\"></img>\n                                    <img src={persik} alt=\"example\"></img>\n                                    <img src={persik} alt=\"example\"></img>\n                                </Gallery>\n                                <Button mode=\"tertiary\"><Avatar style={{ background: 'var(--destructive)' }} size={28}><Icon16Like fill=\"var(--white)\" /></Avatar></Button>\n                                <Button mode=\"tertiary\"><Avatar style={{ background: 'var(--accent)' }} size={28}><Icon16Comment fill=\"var(--white)\" /></Avatar></Button>\n                                <Button mode=\"tertiary\"><Avatar style={{ background: 'var(--accent)' }} size={28}><Icon16Repost fill=\"var(--white)\" /></Avatar></Button>\n                            </FormLayoutGroup>\n                        </FormLayout>\n                    </Card>\n                </CardGrid>\n            </Group>\n        </Div>}\n\t</Panel>\n);\n//        {Array.map(({text,title_group}) =>(\n//            <News text={text} title_group={title_group} go={go}/>\n//        ))}\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n//function statTown(){\n//    return \"DFG\"\n//}\n\nexport default Home;\n","import React from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport { View } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n//import ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport Settings from './panels/Settings';\n\nimport Home from './panels/Home';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactivePanel: 'home',\n\t\t\tfetchedUser: null,\n\t\t\tauthToken : null,\n\t\t\titems : []\n\t\t};\n\n\t}\n\n\tcomponentDidMount() {\n\t\tconnect.subscribe((e) => {\n\t\t\tswitch (e.detail.type) {\n\t\t\t\tcase 'VKWebAppGetUserInfoResult':\n\t\t\t\t\tthis.setState({ fetchedUser: e.detail.data });\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'VKWebAppAccessTokenReceived':\n\t\t\t\t\tthis.setState({ authToken : e.detail.data.access_token });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log(e.detail);\n\t\t\t}\n\t\t});\n\t\tconnect.send('VKWebAppGetUserInfo', {});\n\t\tconnect.send(\"VKWebAppGetAuthToken\", {\"app_id\": 7308928 , \"scope\": \"friends,photos,video,wall,groups\"});\n\t}\n\n\tgo = (e) => {\n\t\tthis.setState({ activePanel: e.currentTarget.dataset.to })\n\t};\n//\n//\tgetItems() {\n//\t\tconst ownerId = 124527492\n//\t\tlet api = `https://api.vk.com/method/market.get?v=5.52&access_token=${this.state.authToken}&owner_id=-${ownerId}`\n//\t\tfetchJsonp(api)\n//\t\t.then(res => res.json())\n//\t\t.then(data => this.setState({ items : data.response.items}))\n//\t\t.catch(e => [])\n//\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<View activePanel={this.state.activePanel}>\n\t\t\t\t<Home id=\"home\" authToken={this.state.authToken} fetchedUser={this.state.fetchedUser} go={this.go} />\n\t\t\t\t<Settings id=\"settings\" fetchedUser={this.state.fetchedUser} go={this.go} />\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n//import VKConnect from '@vkontakte/vkui-connect-mock';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n//VKConnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";"],"sourceRoot":""}