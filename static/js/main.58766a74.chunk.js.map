{"version":3,"sources":["panels/Settings.js","panels/Home.js","App.js","index.js"],"names":["osName","platform","Settings","id","go","fetchedUser","left","onClick","data-to","IOS","title","before","photo_200","src","description","city","first_name","last_name","size","Home","App","useState","activePanel","setActivePanel","setUser","popout","setPopout","useEffect","a","connect","send","user","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"isBAkBMA,EAASC,cAgJAC,EA5IE,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAIC,EAAX,EAAWA,YAAX,OAChB,kBAAC,IAAD,CAAOF,GAAIA,GACV,kBAAC,IAAD,CACCG,KAAM,kBAAC,IAAD,CAAcC,QAASH,EAAII,UAAQ,QACvCR,IAAWS,IAAM,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAF3C,0DAOCJ,GACD,kBAAC,IAAD,CAAOK,MAAM,8CACZ,kBAAC,IAAD,CACCC,OAAQN,EAAYO,UAAY,kBAAC,IAAD,CAAQC,IAAKR,EAAYO,YAAe,KACxEE,YAAaT,EAAYU,MAAQV,EAAYU,KAAKL,MAAQL,EAAYU,KAAKL,MAAQ,IAFpF,UAGKL,EAAYW,WAHjB,YAG+BX,EAAYY,aAG5C,kBAAC,IAAD,CAAOP,MAAM,2DAGb,kBAAC,IAAD,CAAeQ,KAAK,Y,sDCdhBlB,EAASC,cA8BAkB,EA7BF,SAAC,GAAD,IAAGhB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAP,EAAWC,YAAX,OACZ,kBAAC,IAAD,CAAOF,GAAIA,GACV,kBAAC,IAAD,CACCG,KAAM,kBAAC,IAAD,CAAcC,QAASH,EAAII,UAAQ,YACvCR,IAAWS,IAAM,kBAAC,IAAD,MAAoB,kBAAC,IAAD,QAFxC,8CAKA,kBAAC,IAAD,QCKaW,EAhCH,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACVC,EADU,KACGC,EADH,OAEcF,mBAAS,MAFvB,mBAEVhB,EAFU,KAEGmB,EAFH,OAGWH,mBAAS,kBAAC,IAAD,CAAeH,KAAK,WAHxC,mBAGVO,EAHU,KAGFC,EAHE,KAIjBC,qBAAU,WAAM,4CAQf,4BAAAC,EAAA,sEACoBC,IAAQC,KAAK,uBADjC,OACOC,EADP,OAECP,EAAQO,GACRL,EAAU,MAHX,4CARe,sBACfG,IAAQG,WAAU,YAAgC,IAAD,IAA5BC,OAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,KACpC,GAAa,yBAATD,EAAiC,CACpC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQJ,EAAKK,OAASL,EAAKK,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,OALzB,mCAafQ,KACE,IAEH,IAAMxC,EAAK,SAAAyC,GACVtB,EAAesB,EAAEC,cAAcC,QAAQC,KAGxC,OACC,kBAAC,IAAD,CAAM1B,YAAaA,EAAaG,OAAQA,GACvC,kBAAC,EAAD,CAAMtB,GAAG,OAAOE,YAAaA,EAAaD,GAAIA,IACrC,kBAAC,EAAD,CAAUD,GAAG,WAAWE,YAAaA,EAAaD,GAAIA,MC1BlEyB,IAAQC,KAAK,gBASbmB,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,W","file":"static/js/main.58766a74.chunk.js","sourcesContent":["import React from 'react';//, { useState, useEffect }\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\n//import connect from '@vkontakte/vk-connect';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\n//import Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\n\n//import persik from '../img/persik.png';\n//import './Persik.css';\n\nconst osName = platform();\n\n//var count = 0;\n\nconst Settings = ({ id, go, fetchedUser}) => (\n\t<Panel id={id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</HeaderButton>}\n\t\t>\n\t\t\tНастройки\n\t\t</PanelHeader>\n\t\t{fetchedUser &&\n\t\t<Group title=\"Профиль\">\n\t\t\t<Cell\n\t\t\t\tbefore={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n\t\t\t\tdescription={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}>\n\t\t\t\t{`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n\t\t\t</Cell>\n\t\t</Group>}\n\t\t<Group title=\"Инстаграм\">\n\n\t\t</Group>\n\t\t<ScreenSpinner size='large' />\n\t</Panel>\n);\n\nSettings.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\n//function statTown(fetchedUser){\n//    return fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '';\n//}\n//\n//function City(fetchedUser){\n//    console.log(\"start\");\n//    const [fetchedGeo, setGeo] = useState(null);\n//    var town=fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '';\n//    //if (count%100 != 0) return town;\n////    var town = \"False\";\n//    useEffect(() => {\n//        connect.subscribe(({ detail: { type, data }}) => {\n//            if (type === 'VKWebAppUpdateConfig') {\n//                const schemeAttribute = document.createAttribute('scheme');\n//                schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n//                document.body.attributes.setNamedItem(schemeAttribute);\n//            }\n//            if (type === 'VKWebAppGeodataFailed') {\n//                console.log(data);\n//            }\n//        });\n//        async function fetchData() {\n//            const geo = await connect.send('VKWebAppGetGeodata');\n//            setGeo(geo);\n//        }\n//        fetchData();\n//    }, []);\n//    console.log(fetchedGeo);\n//    town=GeoCod(fetchedGeo,fetchedUser);\n//    return town;\n//}\n//function GeoCod(fetchedGeo,fetchedUser){\n//    const [fetchedCity, setCity] = useState(null);\n////    const [test,setDat] = useState(null);\n//    var x=new XMLHttpRequest();\n//    console.log(\"helo\");\n//    var adress='https://geocode-maps.yandex.ru/1.x/?format=json&apikey=aaa60bd2-f573-4cf9-873e-589107560bc0&sco=longlat&kind=locality&geocode=';\n//    if (fetchedGeo !== null){\n//        if( fetchedGeo.available === true){\n//            adress=adress+fetchedGeo.long+','+fetchedGeo.lat;\n//            x.open('GET', adress,false);\n//            x.onload = function() {\n//                if (x.status === 200 ) {\n//                    var string = JSON.parse(x.responseText);\n//                    setCity(string.response.GeoObjectCollection.featureMember[0].GeoObject.name);\n//                    console.log(fetchedGeo);\n//                }\n//            }\n//            x.send();\n//        }\n//        else{\n//           setCity(fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '');\n//        };\n//    }\n//    else{\n//       console.log(fetchedGeo);\n//       setCity(fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : '');\n//    };\n//    count=count+1;\n//    if (fetchedCity!==null){\n//        console.log(\"db run\")\n//        let db = new sqlite3.Database('./db/Newsify.db', (err) => {\n//            if (err) {\n//                console.error(err.message);\n//            }\n//            else{\n//                console.log('Connected to the chinook database.');\n//                selectData();}\n//        });\n//        const selectData = () =>{\n//            console.log(\"Select data\")\n//            db.all('SELECT * FROM Newsify WHERE ID = ?', [fetchedUser.id], (err, rows) => {\n//                if (err) {\n//                    throw err;\n//                }\n//                console.log(rows);\n//                if (rows.length>0){\n//                    updateData();\n//                }\n//                else {\n//                    insertData();\n//                };\n//            });\n//        }\n//        const updateData = () =>{\n//            console.log(\"Update data\")\n//            db.run(\"UPDATE FROM Newsify SET CITY='?' WHERE ID=?\", [fetchedCity,fetchedUser.id]);\n//        }\n//        const insertData = () =>{\n//            console.log(\"Insert data\")\n//            db.run('INSERT INTO Newsify (ID,CITY,LANGUAGE) VALUES (?,?,?)', [fetchedUser.id,fetchedCity,\"RU\"]);\n//        }\n//        db.close((err) => {\n//            if (err) {\n//                return console.error(err.message);\n//            }\n//            console.log('Close the database connection.');\n//        });\n//    }\n//    return fetchedCity;\n//}\n\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//import connect from '@vkontakte/vk-connect';\n//import VKConnect from '@vkontakte/vkui-connect-mock';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\n//import Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28Settings from '@vkontakte/icons/dist/28/settings';\nimport Icon24Settings from '@vkontakte/icons/dist/24/settings';\n//import Group from '@vkontakte/vkui/dist/components/Group/Group';\n////import Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\n//import Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport FormLayout from '@vkontakte/vkui/dist/components/FormLayout/FormLayout';\n//import ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\n\n\n//var count = 0;\n//var town_stat = \"\";\n//const mysql = require(\"mysql2\");\n//const connection = mysql.createConnection({\n//    host: \"db4free.net\",\n//    user: \"alexandrfox\",\n//    database: \"newsify\",\n//    password: \"Yfljyeyfljyt\"\n//});\n\nconst osName = platform();\nconst Home = ({ id, go, fetchedUser}) => (\n\t<Panel id={id}>\n\t\t<PanelHeader\n\t\t\tleft={<HeaderButton onClick={go} data-to=\"settings\">\n\t\t\t\t{osName === IOS ? <Icon28Settings/> : <Icon24Settings/>}\n\t\t\t</HeaderButton>}\n\t\t>Новости</PanelHeader>\n\t\t<FormLayout>\n\t\t</FormLayout>\n\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n//function statTown(){\n//    return \"DFG\"\n//}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport Settings from './panels/Settings';\n\n\nimport Home from './panels/Home';\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n            <Settings id='settings' fetchedUser={fetchedUser} go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n//import VKConnect from '@vkontakte/vkui-connect-mock';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n//VKConnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}